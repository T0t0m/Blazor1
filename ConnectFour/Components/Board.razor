@using System.Drawing

@inject GameState State

<HeadContent>
    <style>
        :root {
            --board-bg: @ColorTranslator.ToHtml(BoardColor);
            --player1: @ColorTranslator.ToHtml(Player1Color);
            --player2: @ColorTranslator.ToHtml(Player2Color);
        }
    </style>
</HeadContent>

<!-- Affiche le message de victoire si le jeu est termin√© -->
@if (gameResult != null)
{
    <div style="color: @(gameResult == "Match nul" ? "red" : (gameResult.Contains("1") ? "green" : "purple")); font-weight: bold;">
        @gameResult
    </div>
    <button title="Click to reset the game" @onclick="Reset">Recommencer</button>
}

<!-- Affiche l'erreur si elle existe -->
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div style="color: red; font-weight: bold;">
        @errorMessage
    </div>
}

<nav>
    @for (byte i = 0; i < 7; i++)
    {
        var col = i;
        <span title="Click to play a piece" @onclick="() => PlayPiece(col)">üîΩ</span>
    }
</nav>
<div>
    <div class="board">
    @for (var i = 0; i < 42; i++)
    {
        <span class="container">
            <span></span>
        </span>
    }
    </div>
    @for (var i = 0; i < 42; i++)
    {
       <span class="@pieces[i]"></span>
    }
</div>
@code {
    private string[] pieces = new string[42];

    private string errorMessage;  // Variable d'√©tat pour l'erreur
    private string gameResult;  // Variable d'√©tat pour le message de victoire

    private void PlayPiece(byte col)
    {
        // V√©rifie si le jeu est termin√©
        if (State.CheckForWin() != ConnectFour.GameState.WinState.No_Winner)
        {
            // R√©cup√®re le r√©sultat du jeu
            var result = State.CheckForWin();

            // D√©termine le message de victoire ou match nul
            gameResult = result switch
            {
                ConnectFour.GameState.WinState.Player1_Wins => "Le joueur 1 a gagn√©!",
                ConnectFour.GameState.WinState.Player2_Wins => "Le joueur 2 a gagn√©!",
                ConnectFour.GameState.WinState.Tie => "Match nul!",
                _ => null
            };

            // Affiche le message d'erreur si le jeu est termin√©
            errorMessage = "Le jeu est termin√©. Impossible de jouer.";

            return;  // Quitte la m√©thode sans appeler PlayPiece() dans le GameState
        }

        // V√©rifie si la colonne est pleine avant de tenter de jouer
        if (State.TheBoard[col] != 0)
        {
            // Affiche un message indiquant que la colonne est pleine
            errorMessage = "La colonne est pleine. Impossible de jouer ici.";
            return; // Quitte la m√©thode sans jouer
        }

        // Si le jeu n'est pas termin√©, on continue √† jouer
        errorMessage = null; // R√©initialise le message d'erreur, le message dispara√Æt
        var player = State.PlayerTurn;
        var turn = State.CurrentTurn;
        var landingRow = State.PlayPiece(col);
        
        // Met √† jour la liste des pi√®ces jou√©es (facultatif, si tu en as besoin)
        pieces[turn] = $"player{player} col{col} drop{landingRow}";
    }

    private void Reset()
    {
        // R√©initialise l'√©tat du plateau de jeu
        State.ResetBoard();

        // R√©initialise √©galement d'autres √©l√©ments comme l'√©tat du jeu
        errorMessage = null;
        gameResult = null;

        // R√©initialise les pi√®ces jou√©es
        ConnectFour.GameState.ResetBoard();  // ou la m√©thode appropri√©e pour r√©initialiser la liste des pi√®ces

        // Optionnel : R√©initialiser d'autres √©l√©ments du jeu
        //State.ResetTurn();  // Si tu as une m√©thode pour r√©initialiser le tour du joueur
    }

    [Parameter]
    public Color BoardColor { get; set; } = ColorTranslator.FromHtml("yellow");

    [Parameter]
    public Color Player1Color { get; set; } = ColorTranslator.FromHtml("red");

    [Parameter]
    public Color Player2Color { get; set; } = ColorTranslator.FromHtml("blue");

    protected override void OnInitialized()
    {
        State.ResetBoard();
    }
}